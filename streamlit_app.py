# -*- coding: utf-8 -*-
"""Copy of streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sftjDdce4pR9RcPiYQ0uq33whW3gGs3z
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- Google Sheets Setup ---
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
CREDS_FILE = "boreal-card-463314-j5-33dd2c643d0c.json"
SPREADSHEET_ID = "1WyByWq6jRSKFSXrvXnFCRriC7gDiPdzyFuGBfsG8q2Y"

def save_to_google_sheet(data):
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID).sheet1
    sheet.append_row(data)

def load_data():
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID).sheet1
    records = sheet.get_all_records(expected_headers=[
        "timestamp", "age", "gender", "shop_freq", "satisfaction",
        "value_factors", "time_saving", "tech_issues", "avoid_online",
        "avoid_reasons", "barriers", "trust_payment", "encouragement",
        "recommendation", "trust_features", "comments"
    ])
    return pd.DataFrame(records)

# --- Streamlit Setup ---
st.set_page_config(page_title="E-Commerce Survey", layout="centered")
st.sidebar.title("üîç Navigation")
mode = st.sidebar.selectbox("Select Mode", ["üìã Take Survey", "üìä Admin Dashboard"])

# --- Survey Mode ---
if mode == "üìã Take Survey":
    st.title("üõí E-Commerce Efficiency & Satisfaction Survey üõí")

    st.markdown("""
    ### üéì Survey Introduction
    This survey is conducted as part of the research project titled:
    **"Quantitative Evaluation of E-Commerce Efficiency and Customer Satisfaction Using Machine Learning Techniques."**

    The purpose of this study is to evaluate the factors influencing online shopping satisfaction, understand user perceptions, identify barriers to adoption, and gather suggestions to improve the online shopping experience.

    Your responses will be kept confidential and used solely for academic purposes.
    Thank you for your valuable input!
    """)

    st.markdown("""
    **Tan Ai Fen (22115538)**<br>
    **Postgraduate Student**<br>
    **Faculty of Computer Science and Information Technology**<br>
    **University of Malaya**
    """, unsafe_allow_html=True)

    st.markdown("---")

    # Section 1
    st.header("Section 1: Basic Information")
    age = st.selectbox("Age:", ["<18", "18‚Äì25", "26‚Äì35", "36‚Äì50", "50+"])
    gender = st.radio("Gender:", ["Male", "Female", "Prefer not to say", "Other"])
    shop_freq = st.radio("How often do you shop online?", ["Daily", "Weekly", "Monthly", "Rarely", "Never"])

    # Section 2
    st.header("Section 2: User Perception & Value")
    satisfaction = st.slider("Q1. Satisfaction with online shopping experience?", 1, 10)
    value_factors = st.multiselect("Q2. What do you value most?",
        ["Price", "Product quality", "Fast delivery", "Easy return policy",
         "Good customer service", "Secure payment", "Easy-to-use website/app"])
    time_saving = st.radio("Q3. Online shopping saves time:",
        ["Strongly Disagree", "Disagree", "Neutral", "Agree", "Strongly Agree"])
    tech_issues = st.radio("Q4. Frequency of technical issues:",
        ["Very Often", "Sometimes", "Rarely", "Never"])

    # Section 3
    st.header("Section 3: Barriers & Non-Adoption")
    avoid_online = st.radio("Q5. Avoided online shopping before?", ["Yes", "No"])
    avoid_reasons = []
    if avoid_online == "Yes":
        avoid_reasons = st.multiselect("If YES, why?",
            ["Trust issues", "Prefer in-store", "Complicated process",
             "Delivery takes too long", "Payment issues"])
    barriers = st.multiselect("Q6. Barriers to shopping online more often:",
        ["Hidden costs", "Lack of trust", "Long delivery time",
         "Prefer to see the item", "Poor customer service"])
    trust_payment = st.slider("Q7. Trust in online payment systems?", 1, 10)

    # Section 4
    st.header("Section 4: Suggestions & Recommendations")
    encouragement = st.multiselect("Q8. What would encourage more online shopping?",
        ["Faster shipping", "Better return process", "Lower prices",
         "Live chat/help", "Verified reviews", "Secure payment options"])
    recommendation = st.slider("Q9. Recommend online shopping to friends?", 0, 10)
    trust_features = st.multiselect("Q10. Features to increase trust:",
        ["Seller ratings", "Return centers", "Secure checkout", "Verified reviews"])
    additional_comments = st.text_area("Q11. Additional comments or suggestions?")

    if st.button("Submit Survey"):
        row = [
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            age, gender, shop_freq, satisfaction,
            ', '.join(value_factors), time_saving, tech_issues, avoid_online,
            ', '.join(avoid_reasons) if avoid_online == "Yes" else "",
            ', '.join(barriers), trust_payment,
            ', '.join(encouragement), recommendation,
            ', '.join(trust_features), additional_comments
        ]
        try:
            save_to_google_sheet(row)
            st.success("‚úÖ Your response has been saved to Google Sheets.")
        except Exception as e:
            st.error(f"‚ùå Failed to save: {e}")

# --- Admin Dashboard Mode ---
elif mode == "üìä Admin Dashboard":
    st.title("üìä Admin Dashboard - Survey Results")

    try:
        df = load_data()

        if df.empty:
            st.warning("‚ö†Ô∏è No responses submitted yet.")
        else:
            st.subheader("üìÑ Raw Data")
            st.dataframe(df)

            st.subheader("üõçÔ∏è Shopping Frequency")
            st.bar_chart(df["shop_freq"].value_counts())

            st.subheader("üìà Satisfaction Scores")
            st.line_chart(df["satisfaction"])

            st.subheader("üîê Trust in Payment Systems")
            st.bar_chart(df["trust_payment"])

            st.subheader("üì£ Recommendation Likelihood")
            st.line_chart(df["recommendation"])

    except Exception as e:
        st.error(f"‚ùå Failed to load dashboard: {e}")